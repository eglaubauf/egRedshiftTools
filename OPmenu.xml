<?xml version="1.0" encoding="UTF-8"?>
<menuDocument>
     <menu>
            <!--***********************************-->
            <scriptItem id="applyRSMAT">
                <context>
                    <expression>
<![CDATA[
n = kwargs.get("node", None)
if n.type().name() != "geo":
    return False
return True ]]>
                    </expression>
                </context>
                <labelExpression>
<![CDATA[
n = kwargs.get("node", None)
if n.type().name() != "geo":
    return "Unavailable in this Context"
else:
    return "Apply RS Material"
]]>
                </labelExpression>
                <scriptCode>
<![CDATA[
n = kwargs.get("node", None)
if n.type().name() != "geo":
    hou.ui.displayMessage('Please select OBJ-Nodes to create Materials')
else:
    import eg_applyRSMat
    reload(eg_applyRSMat)
    eg_applyRSMat.run(n)
]]>
                </scriptCode>
            </scriptItem>
                            <!--***********************************-->
            <scriptItem id="setupOGL">
                <context>
                    <expression>
<![CDATA[
n = kwargs.get("node", None)
if n.type().name() != "redshift_vopnet":
    return False
return True ]]>
                    </expression>
                </context>
                <labelExpression>
<![CDATA[
n = kwargs.get("node", None)
if n.type().name() != "redshift_vopnet":
    return "Unavailable in this Context"
else:
    return "Setup OGL"
]]>
                </labelExpression>
                <scriptCode>
<![CDATA[
n = kwargs.get("node", None)
if n.type().name() != "redshift_vopnet":
    hou.ui.displayMessage('Please select a RSMB to Setup OGL')
else:
    import materialBuild_RS.eg_setupOGL as ogl
    reload(ogl)
    ogl.run_rc(n)
]]>
                </scriptCode>
            </scriptItem>
        <!--***********************************-->
            <scriptItem id="Assign OGL Diffuse Texture">
                <context>
                    <expression>
<![CDATA[
n = kwargs.get("node", None)
if n.type().name() != "redshift::TextureSampler":
    return False
return True ]]>
                    </expression>
                </context>
                <labelExpression>
<![CDATA[
n = kwargs.get("node", None)
if n.type().name() != "redshift::TextureSampler":
    return "Unavailable in this Context"
else:
    return "Setup as OGL Diffuse"
]]>
                </labelExpression>
                <scriptCode>
<![CDATA[
n = kwargs.get("node", None)
if n.type().name() != "redshift::TextureSampler":
    hou.ui.displayMessage('Please select a TextureSampler to Setup OGL')
else:
    import materialBuild_RS.eg_setupOGL as ogl
    reload(ogl)
    ogl.run_rc_channel(n, 1)
]]>
                </scriptCode>
            </scriptItem>
            <!--***********************************-->
  <scriptItem id="Assign OGL Roughness Texture">
                <context>
                    <expression>
<![CDATA[
n = kwargs.get("node", None)
if n.type().name() != "redshift::TextureSampler":
    return False
return True ]]>
                    </expression>
                </context>
                <labelExpression>
<![CDATA[
n = kwargs.get("node", None)
if n.type().name() != "redshift::TextureSampler":
    return "Unavailable in this Context"
else:
    return "Setup as OGL Roughness"
]]>
                </labelExpression>
                <scriptCode>
<![CDATA[
n = kwargs.get("node", None)
if n.type().name() != "redshift::TextureSampler":
    hou.ui.displayMessage('Please select a TextureSampler to Setup OGL')
else:
    import materialBuild_RS.eg_setupOGL as ogl
    reload(ogl)
    ogl.run_rc_channel(n, 2)
]]>
                </scriptCode>
            </scriptItem>
            <!--***********************************-->
  <scriptItem id="Assign OGL Metallic Texture">
                <context>
                    <expression>
<![CDATA[
n = kwargs.get("node", None)
if n.type().name() != "redshift::TextureSampler":
    return False
return True ]]>
                    </expression>
                </context>
                <labelExpression>
<![CDATA[
n = kwargs.get("node", None)
if n.type().name() != "redshift::TextureSampler":
    return "Unavailable in this Context"
else:
    return "Setup as OGL Metallic"
]]>
                </labelExpression>
                <scriptCode>
<![CDATA[
n = kwargs.get("node", None)
if n.type().name() != "redshift::TextureSampler":
    hou.ui.displayMessage('Please select a TextureSampler to Setup OGL')
else:
    import materialBuild_RS.eg_setupOGL as ogl
    reload(ogl)
    ogl.run_rc_channel(n, 3)
]]>
                </scriptCode>
            </scriptItem>
            <!--***********************************-->
  <scriptItem id="Assign OGL Emission Texture">
                <context>
                    <expression>
<![CDATA[
n = kwargs.get("node", None)
if n.type().name() != "redshift::TextureSampler":
    return False
return True ]]>
                    </expression>
                </context>
                <labelExpression>
<![CDATA[
n = kwargs.get("node", None)
if n.type().name() != "redshift::TextureSampler":
    return "Unavailable in this Context"
else:
    return "Setup as OGL Emission"
]]>
                </labelExpression>
                <scriptCode>
<![CDATA[
n = kwargs.get("node", None)
if n.type().name() != "redshift::TextureSampler":
    hou.ui.displayMessage('Please select a TextureSampler to Setup OGL')
else:
    import materialBuild_RS.eg_setupOGL as ogl
    reload(ogl)
    ogl.run_rc_channel(n, 4)
]]>
                </scriptCode>
            </scriptItem>
            <!--***********************************-->
  <scriptItem id="Assign OGL Normal Texture">
                <context>
                    <expression>
<![CDATA[
n = kwargs.get("node", None)
if n.type().name() != "redshift::NormalMap":
    return False
return True ]]>
                    </expression>
                </context>
                <labelExpression>
<![CDATA[
n = kwargs.get("node", None)
if n.type().name() != "redshift::NormalMap":
    return "Unavailable in this Context"
else:
    return "Setup as OGL Normal"
]]>
                </labelExpression>
                <scriptCode>
<![CDATA[
n = kwargs.get("node", None)
if n.type().name() != "redshift::NormalMap":
    hou.ui.displayMessage('Please select a RS-NormalMap to Setup OGL')
else:
    import materialBuild_RS.eg_setupOGL as ogl
    reload(ogl)
    ogl.run_rc_channel(n, 5)
]]>
                </scriptCode>
            </scriptItem>
    </menu>
</menuDocument>
